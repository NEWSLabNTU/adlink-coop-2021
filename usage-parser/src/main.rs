#![allow(unused)]
use log::*;
use pretty_env_logger;
use std::fs::File;
use std::io::{self, BufRead};
use std::path::Path;
use std::vec;
use structopt::StructOpt;

#[derive(Debug, StructOpt)]
struct Cli {
    #[structopt(
        parse(from_os_str),
        short = "i",
        long = "input",
        help = "path to input log file generated by psrecord"
    )]
    path: std::path::PathBuf,
}

fn main() {
    pretty_env_logger::init();
    let args = Cli::from_args();
    let mut max_cpu_usage: f64 = 0.0;
    let mut max_real_memory_usage: f64 = 0.0;
    let mut max_virt_memory_usage: f64 = 0.0;
    if let Ok(lines) = read_lines(args.path) {
        let mut cnt = 0;
        for line in lines {
            if cnt > 0 {
                if let Ok(l) = line {
                    let vec_string = l.split(" ").filter(|&x| !x.is_empty()).collect::<Vec<_>>();
                    if vec_string.len() != 4 {
                        warn!("vector format incorrect, discarding this line!");
                    } else if vec_string[1].parse::<f64>().is_err() {
                        warn!("element #1 in vec_string cannot be parsed as f64, discarding this line!");
                    } else if vec_string[2].parse::<f64>().is_err() {
                        warn!("element #2 in vec_string cannot be parsed as f64, discarding this line!");
                    } else if vec_string[3].parse::<f64>().is_err() {
                        warn!("element #3 in vec_string cannot be parsed as f64, discarding this line!");
                    } else {
                        if vec_string[1].parse::<f64>().unwrap() > max_cpu_usage {
                            max_cpu_usage = vec_string[1].parse::<f64>().unwrap();
                        }
                        if vec_string[2].parse::<f64>().unwrap() > max_real_memory_usage {
                            max_real_memory_usage = vec_string[2].parse::<f64>().unwrap();
                        }
                        if vec_string[3].parse::<f64>().unwrap() > max_virt_memory_usage {
                            max_virt_memory_usage = vec_string[3].parse::<f64>().unwrap();
                        }
                    }
                }
            }
            cnt += 1;
        }
    }
    info!("Max CPU Usage \t\t= {}%", max_cpu_usage);
    info!("Max real Mem Usage \t= {} MB", max_real_memory_usage);
    info!("Max virt Mem Usage \t= {} MB", max_virt_memory_usage);
}

fn read_lines<P>(filename: P) -> io::Result<io::Lines<io::BufReader<File>>>
where
    P: AsRef<Path>,
{
    let file = File::open(filename)?;
    Ok(io::BufReader::new(file).lines())
}
